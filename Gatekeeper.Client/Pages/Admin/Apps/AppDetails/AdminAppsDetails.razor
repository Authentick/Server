@page "/admin/apps/details/{Id:guid}"
@attribute [Authorize(Policy = "SuperAdministrator")]

@layout AdminShell

@using AuthServer.Shared.Admin
@using Gatekeeper.Client.Pages.Admin.Apps.AppDetails.ConfigurationView

@inject AuthServer.Shared.Admin.AdminApps.AdminAppsClient AppsClient

@if (appDetailReply != null)
{
    <h1>Configure @appDetailReply.Name</h1>

    <ul class="nav nav-tabs">
        <li class="nav-item">
            <a class="nav-link @((_activeTab == Tabs.AppInfo) ? "active" : "")" @onclick="@(() => SetActiveTab(Tabs.AppInfo))">App Info</a>
        </li>
        <li class="nav-item">
            <a class="nav-link @((_activeTab == Tabs.Authentication) ? "active" : "")" @onclick="@(() => SetActiveTab(Tabs.Authentication))">Authentication</a>
        </li>
        <li class="nav-item">
            <a class="nav-link @((_activeTab == Tabs.Directory) ? "active" : "")" @onclick="@(() => SetActiveTab(Tabs.Directory))">Directory</a>
        </li>
        <li class="nav-item">
            <a class="nav-link @((_activeTab == Tabs.Permissions) ? "active" : "")" @onclick="@(() => SetActiveTab(Tabs.Permissions))">Permissions</a>
        </li>
    </ul>

    @switch(_activeTab) {
        case Tabs.AppInfo: 
            <AppInfoTab 
                TabData="
                    new AppInfoTab.AppInfoTabData {
                        AppId = appDetailReply.Id,
                        Name = appDetailReply.Name, 
                        Description = appDetailReply.Description,
                        Url = appDetailReply.Url
                    }"
                TabDataChangedCallBack="AppInfoTabCallBack"
            />
            break;
        case Tabs.Authentication:
            if(appDetailReply.HostingType == HostingType.WebGatekeeperProxy) {
                <h2>Gatekeeper Proxy</h2>
                <ConfigureGatekeeperProxy 
                        PublicHostname="@appDetailReply.ProxyAuthSetting.PublicHostname"
                        InternalHostname="@appDetailReply.ProxyAuthSetting.InternalHostname"
                        AppId="@Id"
                        PublicEndpoints="@appDetailReply.ProxyAuthSetting.PublicEndpoints.ToList()"
                    />
            }

            <h2>Authentication mode</h2>
            switch(appDetailReply.AuthSettingCase) {
                case AppDetailReply.AuthSettingOneofCase.LdapAuthSetting:
                    <span>Base DN: @appDetailReply.LdapAuthSetting.BaseDn</span>
                    break;

                case AppDetailReply.AuthSettingOneofCase.OidcAuthSetting:
                    <p>Client ID: @appDetailReply.OidcAuthSetting.ClientId</p>
                    <p>Client Secret: @appDetailReply.OidcAuthSetting.ClientSecret</p>
                    <p>Redirect URI: @appDetailReply.OidcAuthSetting.RedirectUri</p>
                    break;

                case AppDetailReply.AuthSettingOneofCase.None:
                    <p>No further authentication is configured.</p>
                    break;
            }
            break;
        case Tabs.Directory:
            switch(appDetailReply.DirectorySettingCase) {
                case AppDetailReply.DirectorySettingOneofCase.LdapDirectorySetting:
                    <p>Base DN: @appDetailReply.LdapDirectorySetting.BaseDn</p>
                    <p>Bind user: @appDetailReply.LdapDirectorySetting.Username</p>
                    <p>Bind password: @appDetailReply.LdapDirectorySetting.Password</p>
                    break;
                case AppDetailReply.DirectorySettingOneofCase.ScimDirectorySetting:
                    <p>Endpoint: @appDetailReply.ScimDirectorySetting.Endpoint</p>
                    <p><button @onclick="TriggerScimSync">Trigger sync</button></p>
                    break;
                case AppDetailReply.DirectorySettingOneofCase.None:
                    <span>None configured</span>
                    break;
            }
            break;
        case Tabs.Permissions:
                <p>Groups:</p>
                @foreach (GrantedAppGroup group in appDetailReply.Groups)
                {
                    <li>@group.Name (@group.Id) <button @onclick="@(async () => await RemoveGroupFromApp(group))">Remove access</button></li>
                }

                <form @onsubmit="@AddGroupToApp">
                    <input type="text" @bind="@GroupId" />
                    <button type="submit">Add group</button>
                </form>
            break;
    }
}

@code {
    [Parameter]
    public Guid Id { get; set; }

    private AppDetailReply? appDetailReply;
    private string GroupId = "";
    private Tabs _activeTab = Tabs.AppInfo;
    private enum Tabs 
    {
        AppInfo = 1,
        Authentication = 2,
        Directory = 3,
        Permissions = 4,
    }

    protected override async Task OnInitializedAsync()
    {
        AppDetailRequest request = new AppDetailRequest
        {
            Id = Id.ToString(),
        };

        appDetailReply = await AppsClient.GetAppDetailsAsync(request);
    }

    private async Task SetActiveTab(Tabs tab)
    {
        _activeTab = tab;
    }

    private async Task AppInfoTabCallBack(AppInfoTab.AppInfoTabData tabData){
        appDetailReply.Name = tabData.Name;
        appDetailReply.Description = tabData.Description;
        appDetailReply.Url = tabData.Url;
    }

    private async Task TriggerScimSync() {
        ScimSyncRequest request = new ScimSyncRequest
        {
            AppId = Id.ToString(),
        };

        await AppsClient.TriggerScimSyncAsync(request);
    }

    private async Task AddGroupToApp()
    {
        AddGroupToAppRequest request = new AddGroupToAppRequest
        {
            AppId = Id.ToString(),
            GroupId = GroupId,
        };
        await AppsClient.AddGroupToAppAsync(request);
    }

    private async Task RemoveGroupFromApp(GrantedAppGroup group)
    {
        RemoveGroupFromAppRequest request = new RemoveGroupFromAppRequest
        {
            AppId = Id.ToString(),
            GroupId = group.Id,
        };

        await AppsClient.RemoveGroupFromAppAsync(request);
    }
}
