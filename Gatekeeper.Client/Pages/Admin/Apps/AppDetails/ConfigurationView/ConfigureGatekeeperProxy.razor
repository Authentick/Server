@inject AuthServer.Shared.ConnectivityCheckService.ConnectivityCheckServiceClient ConnectivityCheckServiceClient
@inject AuthServer.Shared.Admin.AdminApps.AdminAppsClient AppsClient

<p>This application is protected using Gatekeeper Proxy. <a href="https://docs.gatekeeper.page/admin/managing-applications/understanding-settings/authentication-modes/gatekeeper-proxy"><i class="fas fa-book"></i></a></p>
<p>Public hostname: <input @bind="PublicHostname" type="text" /></p>
@if(_hasPublicHostnameResolutionProblem) {
    <p>Public hostname doesn't resolve to this host.</p>
}
<p>Internal hostname: <input @bind="@InternalHostname" type="text" /></p>

<p>Public endpoints: (separated by space)</p> <input @bind="@_publicSpaceSeparatedEndpoints" type="text" />

<button type="submit" @onclick="SaveChanges">Save changes</button>

@code {
    [Parameter]
    public string PublicHostname { get; set;} = "";

    [Parameter]
    public string InternalHostname { get; set; } = "";

    [Parameter]
    public Guid AppId { get; set; }

    [Parameter]
    public List<string> PublicEndpoints { get; set; } = new List<string>();

    private string _publicSpaceSeparatedEndpoints = "";
    private bool _hasPublicHostnameResolutionProblem;
    private string _initialPublicHostname = "";

    protected override void OnInitialized()
    {
        _publicSpaceSeparatedEndpoints = String.Join(" ", PublicEndpoints);
        _initialPublicHostname = PublicHostname;
    }

    private async Task PerformHostnameResolutionCheck()
    {
        _hasPublicHostnameResolutionProblem = ((await ConnectivityCheckServiceClient.IsPublicAccessibleAsync(
            new AuthServer.Shared.IsPublicAccessibleRequest { 
                Hostname = PublicHostname
            }
        )).State != AuthServer.Shared.IsPublicAccessibleReply.Types.AccessibleReplyEnum.Success);
    }

    private async Task SaveChanges()
    {
        if(_initialPublicHostname == PublicHostname) {
            _hasPublicHostnameResolutionProblem = false;
        }
        else
        {
            await PerformHostnameResolutionCheck();
        }

        if(!_hasPublicHostnameResolutionProblem) 
        {
            AuthServer.Shared.Admin.GatekeeperProxySettingsRequest request = new AuthServer.Shared.Admin.GatekeeperProxySettingsRequest {
                AppId = AppId.ToString(),
                InternalHostname = InternalHostname,
                PublicHostname = PublicHostname,
            };

            if(_publicSpaceSeparatedEndpoints != "")
            {
                if(_publicSpaceSeparatedEndpoints.Contains(" ")) 
                {
                    List<string> publicEndpointList = _publicSpaceSeparatedEndpoints.Split(" ").ToList();
                    request.PublicEndpoints.AddRange(publicEndpointList);
                } 
                else
                {
                    request.PublicEndpoints.Add(_publicSpaceSeparatedEndpoints);
                }
            }

            await AppsClient.SaveGatekeeperProxySettingsAsync(request);
        }
    }
}
