@page "/admin/apps"
@attribute [Authorize(Policy = "SuperAdministrator")]

@layout AdminShell

@using AuthServer.Shared.Admin

@inject AuthServer.Shared.Admin.AdminApps.AdminAppsClient AppsClient

<div class="d-flex flex-lg-row flex-column justify-content-between">
    <h2>Applications</h2>
    <a href="/admin/apps/setup/" class="btn btn-primary mb-lg-0 mb-3"><i class="fas fa-plus mr-2"></i>Add a new app</a>
</div>

@if(appsReply != null && appsReply.Apps.Count != 0) {

    <div class="d-flex flex-column simple-card p-2 my-4">
        @foreach(AppListEntry entry in appsReply.Apps) {
            <div class="d-flex flex-row justify-content-between p-3">
                <p class="col-3">@entry.Name</p>
                <p class="col-3">@entry.HostingType</p>
                <p class="col-3">@entry.GroupsAssigned assigned groups</p>
                <Gatekeeper.Client.Shared.Components.Dropdown.Dropdown>
                            <Gatekeeper.Client.Shared.Components.Dropdown.DropdownTrigger>
                                <button class="btn-unstyled">
                                    <i class="fas fa-ellipsis-h"></i>
                                </button>
                            </Gatekeeper.Client.Shared.Components.Dropdown.DropdownTrigger>

                            <Gatekeeper.Client.Shared.Components.Dropdown.DropdownContent>
                                <a href="/admin/apps/details/@entry.Id" class="dropdown-item">Edit</a> 

                                <span class="dropdown-item" @onclick="@(() => Delete(entry))">Delete</span>
                            </Gatekeeper.Client.Shared.Components.Dropdown.DropdownContent>
                        </Gatekeeper.Client.Shared.Components.Dropdown.Dropdown>
            </div>
        }

    </div>
}

@code {
    private AppListReply? appsReply;
    protected override async Task OnInitializedAsync()
    {
        appsReply = await AppsClient.ListAppsAsync(new Google.Protobuf.WellKnownTypes.Empty());
    }

    private async Task Delete(AppListEntry entry) 
    {
        var request = new DeleteAppRequest{AppId = entry.Id};
        await AppsClient.DeleteAppAsync(request);

        if(appsReply != null) {
            appsReply.Apps.Remove(entry);
        }
    }
}
