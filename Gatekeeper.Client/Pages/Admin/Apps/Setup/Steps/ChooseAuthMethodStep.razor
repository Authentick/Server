@implements IStep

<h4 class="text-lg">Choose Authentication Method</h4>

<p>To integrate Gatekeeper with another application, you need to configure how the authentication process will work.</p>

<div class="form-check">
    @foreach(AuthenticationMethodsProvider.IAuthMethod method in _authMethods)
    {
        <input class="form-check-input" @onclick="(() => SetActiveMethod(method))" type="radio" id="@method.Name" name="certificateSelectionStep" value="@method.Name">
        <label class="form-check-label" for="@method.Name">
            @method.Name
            @if (_selectedMethod == method) {
                <br />
                @method.Description
                <br />

                @foreach(string advantage in method.Advantages) 
                {
                    <div class="pt-1">
                        <span class="material-icons text-green align-middle">add_circle</span> @advantage<br/>
                    </div>
                }

                @foreach(string disadvantage in method.Disadvantages) 
                {
                    <div class="pt-1">
                        <span class="material-icons text-red align-middle">remove_circle</span> @disadvantage<br/>
                    </div>
                }
            }
        </label>

        <br/>
    }
</div>

@code {
    [Parameter]
    public SetupAppStateMachine StateMachine { get; set; } = null!;
    public AuthServer.Shared.Admin.AddNewAppRequest.Types.AuthChoice AuthChoice;

    private AuthenticationMethodsProvider.IAuthMethod? _selectedMethod;
    private IEnumerable<AuthenticationMethodsProvider.IAuthMethod> _authMethods = new List<AuthenticationMethodsProvider.IAuthMethod>();

    protected override void OnInitialized() 
    {
        _authMethods = (new AuthenticationMethodsProvider()).GetAuthMethods(StateMachine.GetAddNewAppRequest().HostingType);
    }

    private void SetActiveMethod(AuthenticationMethodsProvider.IAuthMethod method) 
    {
        _selectedMethod = method;

        switch(method) {
            case AuthenticationMethodsProvider.LDAPAuthMethod:
                AuthChoice = AuthServer.Shared.Admin.AddNewAppRequest.Types.AuthChoice.LdapAuth;
                StateMachine.SetNextStep(new ChooseDirectoryMethodStep());
                break;
            case AuthenticationMethodsProvider.OpenIDConnectAuthMethod:
                AuthChoice = AuthServer.Shared.Admin.AddNewAppRequest.Types.AuthChoice.OidcAuth;
                StateMachine.SetNextStep(new ConfigureOpenIDConnectStep());
                break;
             case AuthenticationMethodsProvider.GatkeeperProxyAuthMethod:
                AuthChoice = AuthServer.Shared.Admin.AddNewAppRequest.Types.AuthChoice.NoAuth;
                StateMachine.SetNextStep(new ChooseDirectoryMethodStep());
                break;
            default:
                StateMachine.SetNextStep(null);
                break;
        }
    }
}
