@page "/admin/users"
@attribute [Authorize(Policy = "SuperAdministrator")]

@layout AdminShell

@using AuthServer.Shared.Admin
@using Gatekeeper.Client.Shared.Components.Avatar

@inject AuthServer.Shared.Admin.Users.UsersClient UsersClient

<div class="d-flex flex-column flex-md-row justify-content-between">
    <h2>Users</h2>
    <a class="btn btn-primary mb-3 mb-md-0" href="/admin/users/create"><i class="fas fa-plus mr-2"></i>Add a new user</a>
</div>

@if (UserListReply != null && UserListReply.Users.Count != 0)
{
    <div class="d-flex flex-column simple-card p-2 my-4">
          @foreach (User user in UserListReply.Users)
                {
                    <div class="d-flex flex-row justify-content-between py-3 align-items-left align-items-lg-center text-left">
                        <div class="d-flex flex-row col-10 col-lg-4">
                            @if(user.HasPicture)
                            {
                                <img src="/api/profile/image/@user.Id" class="avatar avatar__sm mr-2">
                            }
                            else
                            {
                                <AvatarPlaceholder 
                                Name="@user.Name" 
                                Size="AvatarPlaceholder.SizeEnum.Small"
                                OptionalClasses="mr-2"
                                 />      
                            }
                            <div class="d-flex flex-column">
                                <span class="mb-0">@user.Name</span> 
                                <span class="text-sm font-weight-light flex-row"> 
                                    <span class="text-sm font-weight-bold mr-2 d-lg-none">Email</span>
                                    @user.Email
                                </span>
                                <span class="d-flex flex-row d-lg-none font-weight-light text-sm">
                                    <span class="text-black font-weight-bold mr-2">Username</span>
                                    @user.Name
                                </span>
                                <span class="d-flex flex-row d-lg-none font-weight-light text-sm">
                                    <span class="font-weight-bold mr-2">Status</span>
                                    @if(user.IsEnabled)
                                    {
                                        <span class="text-primary">Enabled</span>
                                    }
                                    else
                                    {
                                        <span class="text-watermelon">Disabled</span>
                                    }
                                </span>
                                <span class="d-flex flex-row d-lg-none font-weight-light text-sm">
                                    <span class="text-black font-weight-bold mr-2">Role</span>
                                    @GetRoleName(user.IsAdmin)
                                </span>
                            </div>
                        </div>

                        <span class="d-lg-flex d-none col-3">@user.Name</span>
                        @if(user.IsEnabled)
                        {
                            <span class="d-lg-flex d-none text-primary col-2">Enabled</span>
                        }
                        else
                        {
                            <span class="d-lg-flex d-none text-watermelon col-2">Disabled</span>
                        }
                        <span class="d-lg-flex d-none col-2">@GetRoleName(user.IsAdmin)</span>
                        <Gatekeeper.Client.Shared.Components.Dropdown.Dropdown>
                            <Gatekeeper.Client.Shared.Components.Dropdown.DropdownTrigger>
                                <button class="btn-unstyled">
                                    <i class="fas fa-ellipsis-h"></i>
                                </button>
                            </Gatekeeper.Client.Shared.Components.Dropdown.DropdownTrigger>

                            <Gatekeeper.Client.Shared.Components.Dropdown.DropdownContent>
                                <span class="dropdown-item" @onclick="(() => ToggleAdminState(user))">
                                    @if(user.IsAdmin)
                                    {
                                        <text>Demote to member</text>
                                    }
                                    else
                                    {
                                        <text>Promote to admin</text>
                                    }
                                </span>
                                <span class="dropdown-item" @onclick="(() => ToggleDisabledState(user))">
                                    @if(user.IsEnabled)
                                    {
                                        <text>Disable user</text>
                                    }
                                    else
                                    {
                                        <text>Enable user</text>
                                    }
                                </span>

                            </Gatekeeper.Client.Shared.Components.Dropdown.DropdownContent>
                        </Gatekeeper.Client.Shared.Components.Dropdown.Dropdown>
                    </div>
                }
    </div>
}

@code {
    #nullable enable

    private UserListReply? UserListReply;

    protected override async Task OnInitializedAsync()
    {
        UserListReply = await UsersClient.ListUsersAsync(new Google.Protobuf.WellKnownTypes.Empty());
    }

    private string GetRoleName(bool isAdmin)
    {
        return isAdmin ? "Admin" : "Member";
    }

    private async Task ToggleAdminState(User user)
    {
        await UsersClient.ChangeAdminStateAsync(new ChangeAdminStateRequest{
            Id = user.Id,
            IsAdmin = !user.IsAdmin,
        });
        user.IsAdmin = !user.IsAdmin;
    }

    private async Task ToggleDisabledState(User user)
    {
        await UsersClient.ChangeEnabledStateAsync(new ChangeEnabledStateRequest{
            Id = user.Id,
            IsDisabled = user.IsEnabled,
        });

        user.IsEnabled = !user.IsEnabled;
    }
}
