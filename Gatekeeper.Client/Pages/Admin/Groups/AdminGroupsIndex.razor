@page "/admin/groups"
@attribute [Authorize(Policy = "SuperAdministrator")]

@layout AdminShell

@using AuthServer.Shared.Admin
@using Gatekeeper.Client.Shared.Components.Avatar

@inject AuthServer.Shared.Admin.Groups.GroupsClient GroupsClient

<div class="d-flex flex-column flex-md-row justify-content-between">
    <h2>Groups</h2>
    <a class="btn btn-secondary-dark mb-3 mb-md-0" href="/admin/groups/create">Add a new group</a>
</div>

@if (groupsListReply != null)
{
    <div class="d-flex flex-column simple-card p-2 my-4">
        @foreach (Group group in groupsListReply.Groups)
                {
                    <div class="d-flex flex-row justify-content-between p-3">
                        <div class="d-flex flex-row align-items-center">
                            <AvatarPlaceholder 
                            Name="@group.Name" 
                            Size="AvatarPlaceholder.SizeEnum.Small"
                            OptionalClasses="mr-2"
                            />      
                            @group.Name
                        </div>
                        <div class="d-flex flex-row">
                            <Gatekeeper.Client.Shared.Components.Dropdown.Dropdown>
                            <Gatekeeper.Client.Shared.Components.Dropdown.DropdownTrigger>
                                <button class="btn-unstyled">
                                    <i class="fas fa-ellipsis-h"></i>
                                </button>
                            </Gatekeeper.Client.Shared.Components.Dropdown.DropdownTrigger>

                            <Gatekeeper.Client.Shared.Components.Dropdown.DropdownContent>
                                <a href="/admin/groups/details/@group.Id" class="dropdown-item">Edit</a> 

                                <span class="dropdown-item" @onclick="@(() => Delete(group))">Delete</span>
                            </Gatekeeper.Client.Shared.Components.Dropdown.DropdownContent>
                        </Gatekeeper.Client.Shared.Components.Dropdown.Dropdown>
                        </div>
                    </div>
                }
    </div>
}

@code {
    private GroupsListReply? groupsListReply;

    protected override async Task OnInitializedAsync()
    {
        groupsListReply = await GroupsClient.ListGroupsAsync(new Google.Protobuf.WellKnownTypes.Empty());
    }

    private async Task Delete(Group group) 
    {
        var request = new DeleteGroupRequest {
            Id = group.Id
        };
        await GroupsClient.DeleteGroupAsync(request);

        if(groupsListReply != null) {
            groupsListReply.Groups.Remove(group);
        }
    }
}
