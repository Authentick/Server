@page "/admin/groups/details/{Id:guid}"
@attribute [Authorize(Policy = "SuperAdministrator")]

@layout AdminShell

@using AuthServer.Shared.Admin
@using AuthServer.Shared
@using Gatekeeper.Client.Shared.Components.Typeahead
@using Gatekeeper.Client.Shared.Components.Avatar

@inject AuthServer.Shared.Admin.Groups.GroupsClient GroupsClient

@inject NavigationManager NavigationManager

@if (GroupDetails != null)
{
    <h2>@GroupDetails.Name</h2>

    <form @onsubmit="@AddUserToGroupSubmit">
        <div class="form-group col-12 col-md-8 p-0 d-flex flex-column flex-md-row">
            <div class="d-flex flex-column mb-3 mb-md-0 mr-0 mr-md-3 w-100">
                <UserTypeahead OnSelectCallback="@UserSelected" />
            </div>
            
            <button type="submit" class="btn btn-secondary-dark w-100" disabled="@(SelectedUserId == null)">Add user to group</button>
        </div>
    </form>

    <div class="d-flex flex-column simple-card p-2 my-4">
         @foreach(GroupMember member in GroupDetails.Members)
                {
                    <div class="d-flex flex-row justify-content-between p-3">
                        <div class="d-flex flex-row align-items-center">
                            <AvatarPlaceholder 
                            Name="@member.Name" 
                            Size="AvatarPlaceholder.SizeEnum.Small"
                            OptionalClasses="mr-2"
                        />      
                        @member.Name
                        </div>
                        <button class="btn btn-secondary-dark btn-delete" @onclick="@(async () => await RemoveMember(member))">Remove</button>
                    </div>
                }
    </div>
}

@code {
    [Parameter]
    public Guid Id { get; set; }

    private string? SelectedUserId;

    private GroupDetailResponse? GroupDetails;

    protected override async Task OnInitializedAsync()
    {
        await LoadGroupMembers();
    }

    private async Task LoadGroupMembers() 
    {
        GroupDetailRequest request = new GroupDetailRequest
        {
            Id = Id.ToString(),
        };

        GroupDetails = await GroupsClient.GetGroupDetailsAsync(request);
    }

    private void UserSelected(string? userId) 
    {
        SelectedUserId = userId;
    }

    private async Task AddUserToGroupSubmit() 
    {
        AddUserToGroupRequest addUserToGroupRequest = new AddUserToGroupRequest 
        {
            GroupId = Id.ToString(),
            UserId = SelectedUserId,
        };

        SelectedUserId = null;

        await GroupsClient.AddUserToGroupAsync(addUserToGroupRequest);
        await LoadGroupMembers();
    }

    private async Task RemoveMember(GroupMember member) 
    {
        RemoveUserFromGroupRequest request = new RemoveUserFromGroupRequest
        {
            GroupId = Id.ToString(),
            UserId = member.Id,
        };

        await GroupsClient.RemoveUserFromGroupAsync(request);
        await LoadGroupMembers();
    }
}
