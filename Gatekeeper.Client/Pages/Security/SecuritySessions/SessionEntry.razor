@using AuthServer.Shared.Security

<div class="entry d-flex flex-column flex-md-row justify-content-between">
    <div class="d-flex flex-row">
        <i class="fas @_icon fa-2x mr-3 pt-2 md-icon-34"></i>
        <div class="d-flex flex-column line-height-teaser"> 
            <p class="mb-0">@Session.Name</p>
            @if (Session.IsCurrentSession)
            {
                <p class="mb-0 text-sm">Your current session</p>
            }
            else if(_isInvalidated)
            {
                <p class="mb-0 text-sm">Expired on @Session.InvalidatedAt.ToDateTime().ToString("dd MMMM yyyy")</p>
            }
            else
            {
                <p class="mb-0 text-sm">Last accessed on @Session.LastActive.ToDateTime().ToString("dd MMMM yyyy")</p>
            }

            <span class="mb-0 text-sm">
                Seen in: 
                @foreach(string country in _countryList)
                {
                    @country
                    @if (_countryList.Last() != country)
                    {
                        <text>, </text>
                    }
                }
            </span>
            @if (_isExpanded)
                {
                    <div class="d-flex flex-row text-sm mt-2">
                        <div class="d-flex flex-column">
                            <span class="d-flex flex-row align-items-center">
                                <i class="fas fa-globe-europe mr-1"></i>
                                <p class="mb-0">Locations</p>
                            </span>
                                @foreach(var location in Session.Locations)
                                {
                                    <p>
                                    @location.IpAddress &nbsp;
                                    @if(location.City != null || location.Country != null)
                                    {
                                        <span> (</span>
                                        @if(location.City != null)
                                        {
                                            <span>Near&nbsp;</span> @location.City<span>,&nbsp;</span>
                                        }
                                        @if(location.Country != null)
                                        {
                                            @location.Country
                                        }
                                        <span>)</span>
                                    }
                                    </p>
                                }
                    </div>
                    <div class="d-flex flex-column ml-4">
                        <p class="mb-0">Signed in:</p>
                        <p class="mb-0">@Session.SignedIn.ToDateTime().ToString("dd MMMM yyyy")</p>
                    </div>
                </div>
                }
        </div>

    </div>

    <div class="d-flex flex-column">

    <button @onclick="@(() => _isExpanded = !_isExpanded)" class="btn btn-secondary-dark mb-2">
        @if (_isExpanded)
        {
            <text>See less</text>
        }
        else 
        {
            <text>See more</text>
        }
    </button>

    @if(!_isInvalidated && _isExpanded)
        {
            <button @onclick="InvalidateSession" class="btn btn-secondary-dark">Revoke access</button>        
        }
    </div>
</div>


@code {
    [Parameter]
    public AuthServer.Shared.Security.Session Session { get; set; } = null!;
    [Parameter]
    public EventCallback<AuthServer.Shared.Security.Session> InvalidateSessionCallback { get; set; }

    private bool _isExpanded;
    private HashSet<string> _countryList = new HashSet<string>();
    private string _icon = "fa-desktop";
    private bool _isInvalidated;

    protected override void OnInitialized()
    {
        _isInvalidated = Session.InvalidatedAt != null;
        switch(Session.DeviceType)
        {
            case AuthServer.Shared.Security.Session.Types.DeviceTypeEnum.Smartphone:
                _icon = "fa-mobile-alt";
                break;
            case AuthServer.Shared.Security.Session.Types.DeviceTypeEnum.Tablet:
                _icon = "fa-tablet-alt";
                break;
        }

        foreach(var location in Session.Locations)
        {
            if (location.Country != null)
            {
                _countryList.Add(location.Country);
            }
            else
            {
                _countryList.Add("Unknown location");
            }
        }
    }

    private async Task InvalidateSession()
    {
        await InvalidateSessionCallback.InvokeAsync(Session);
    }
}
