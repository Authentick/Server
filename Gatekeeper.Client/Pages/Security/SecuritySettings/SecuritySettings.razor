@page "/security/settings/"
@attribute [Authorize]

@layout SecurityShell

@using AuthServer.Shared.Security

@inject AuthServer.Shared.Security.Settings.SettingsClient SettingsClient

<h2>Change password</h2>

<form class="my-4 pb-4" @onsubmit="@SubmitChangePasswordForm">
  <div class="form-group col-12 col-md-6 p-0">
    <input type="password" class="form-control bg-secondary" @bind="@CurrentPassword" placeholder="Current password">
  </div>
  <div class="form-group col-12 col-md-6 p-0">
    <input type="password" class="form-control bg-secondary" @bind="@NewPassword" placeholder="New password">
  </div>
  <div class="form-group col-12 col-md-6 p-0">
    <input type="password" class="form-control bg-secondary" @bind="@ConfirmNewPassword" placeholder="Confirm new password">
  </div>
  <button type="submit" class="btn btn-primary">Update password</button>
</form>

<h2>Two-factor authentication</h2>
<div class="d-flex flex-lg-row flex-column justify-content-between">
    <div class="d-flex flex-column pr-4">
        <h5>Authentication app</h5>
        <p>Use an application on your phone to get two-factor authentication codes when prompted.</p>
    </div>
    <a href="/security/settings/add-two-factor" class="btn btn-primary mb-lg-0 mb-3"><i class="fas fa-plus mr-2"></i>Add a new app</a>
</div>

@if (_twoFactorListReply != null && _twoFactorListReply.TwoFactorDevices.Count > 0)
{
  <div class="wrapper">
    @foreach(TwoFactorDevice device in _twoFactorListReply.TwoFactorDevices)
    {
      <TwoFactorDeviceEntry 
        Device="device"
        InvalidateDeviceCallback="InvalidateDevice"
      />
    }
  </div>
}

@code {
    #nullable enable
    private string? CurrentPassword;
    private string? NewPassword;
    private string? ConfirmNewPassword;
    private TwoFactorListReply? _twoFactorListReply;

    protected override async Task OnInitializedAsync() 
    {
      _twoFactorListReply = await SettingsClient.ListAuthenticatorAppsAsync(new Google.Protobuf.WellKnownTypes.Empty());
    }

    private async Task SubmitChangePasswordForm() 
    {
      if (NewPassword != ConfirmNewPassword) {
        return;
      }

      ChangePasswordRequest request = new ChangePasswordRequest{
        CurrentPassword = CurrentPassword,
        NewPassword = NewPassword
      };
      
      await SettingsClient.ChangePasswordAsync(request);
    }

    private async Task InvalidateDevice(TwoFactorDevice device)
    {
      RemoveAuthenticatorRequest request = new RemoveAuthenticatorRequest{
        Id = device.Id.ToString(),
      };
      await SettingsClient.RemoveAuthenticatorAsync(request);
      if(_twoFactorListReply != null)
      {
        _twoFactorListReply.TwoFactorDevices.Remove(device);
      }
    }
}