@page "/install"
@page "/install/{Secret}"

@implements IDisposable

@layout LoggedOutLayout

@inject AuthServer.Shared.Install.InstallClient InstallClient
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

@using AuthServer.Shared

<div class="h-100 pt-0 pt-md-4">
    @if(_installIsPossible) {
        @RenderCurrentStep()

        <div class="row justify-content-center mt-5">
            <button type="submit" class="col-sm-5 btn" @onclick="RevertToPreviousStep" disabled="@(!(InstallStateMachine.HasPreviousStep()))">Previous step</button>

            @if(CurrentStep != null && CurrentStep.GetType() == typeof(Steps.AccountCreationStep)) {
                <button type="submit" class="col-sm-5 offset-sm-1 btn" @onclick="SetupInstance" disabled="@(!(InstallStateMachine.HasNextStep()))">Finish setup</button>
            } else {
                <button type="submit" class="col-sm-5 offset-sm-1 btn" @onclick="ProceedToNextStep" disabled="@(!(InstallStateMachine.HasNextStep()))">Next step</button>
            }
        </div>
    } else {
        <div>Installation is not possible at the moment.</div>
    }
</div>

@code {
    [Parameter]
    public string? Secret { get; set; }

    private InstallStateMachine InstallStateMachine = null!;
    private IStep? CurrentStep;
    private bool _installIsPossible = true;

    protected override void OnInitialized() 
    {
        InstallStateMachine = new InstallStateMachine();
        if(Secret == null) 
        {
            InstallStateMachine.Initialize();
        }
        else
        {
            InstallStateMachine.ResumeFromHttps();
        }
        InstallStateMachine.OnChange += StateHasChanged;
        SetCurrentStep();
    }

    protected override async Task OnInitializedAsync() 
    {
        if (Secret == null)
        {
            StartSetupReply reply = await InstallClient.StartSetupAsync(new Google.Protobuf.WellKnownTypes.Empty{});
            InstallStateMachine.AuthToken = reply.AuthToken;

            if (!reply.Success) 
            {
                _installIsPossible = false;
            }
        }
        else
        {
            ChangeInstallTokenReply reply = await InstallClient.ChangeInstallTokenAsync(new ChangeInstallTokenRequest{
                AuthToken = Secret
            });

            InstallStateMachine.AuthToken = reply.AuthToken;
            if(InstallStateMachine.AuthToken == "")
            {
                _installIsPossible = false;
            }
        }
    }

    public void Dispose()
    {
        InstallStateMachine.OnChange -= StateHasChanged;
    }

    private void RevertToPreviousStep() {
        InstallStateMachine.GoBack(CurrentStep);
        SetCurrentStep();
    }

    private void ProceedToNextStep() {
        InstallStateMachine.FinishStep(CurrentStep);
        SetCurrentStep();
    }

    private void SetCurrentStep() {
        CurrentStep = InstallStateMachine.GetCurrentStep();
    }

    private async Task SetupInstance() {
        InstallStateMachine.FinishStep(CurrentStep);

        SetupInstanceRequest request = InstallStateMachine.GetSetupInstanceRequest();
        request.AuthToken = InstallStateMachine.AuthToken;
        SetupInstanceReply reply = await InstallClient.SetupInstanceAsync(request);

        if(reply.Succeeded) 
        {
            ((Util.AuthStateProvider) AuthenticationStateProvider).StateHasChanged();
            NavigationManager.NavigateTo("/");
        } 
        else
        {
            _installIsPossible = false;        
        }
    }

    private RenderFragment RenderCurrentStep() => builder =>
    {
        if(CurrentStep != null) 
        {
            builder.OpenComponent(0, CurrentStep.GetType());
            builder.AddAttribute(1, "StateMachine", InstallStateMachine);
            builder.AddComponentReferenceCapture(2, capturedRef => { CurrentStep = (IStep)capturedRef; });
            builder.CloseComponent();
        }
    };
}
