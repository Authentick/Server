@page "/security/sessions"
@attribute [Authorize]

@layout SecurityShell

@using AuthServer.Shared.Security

@inject AuthServer.Shared.Security.Sessions.SessionsClient SessionsClient

<h2>Active sessions</h2>

@if (SessionListReply != null)
{
  <div class="table-responsive mb-2">
    <table class="table table-hover table-bordered mb-4 table-secondary table-striped">
      <thead class="bg-secondary-dark">
        <tr>
          <th scope="col" class="border-0">Name</th>
          <th scope="col" class="border-0">Added</th>
          <th scope="col" class="border-0">Last used</th>
          <th scope="col" class="border-0">Actions</th>
        </tr>
      </thead>
      <tbody>

        @foreach (Session session in SessionListReply.Session)
        {
          <tr>
            <td>@session.Name</td>
            <td>@session.SignedIn</td>
            <td>TODO</td>
            <td>
              <button @onclick="@(async () => await InvalidateSession(session))"
                class="btn btn-secondary-dark">Invalidate</button>
            </td>
          </tr>
        }
      </tbody>
    </table>
  </div>
}

<h2>Expired sessions</h2>

@if (ExpiredSessionListReply != null)
{
  <div class="table-responsive mb-2">
    <table class="table table-hover table-bordered mb-4 table-secondary table-striped">
      <thead class="bg-secondary-dark">
        <tr>
          <th scope="col" class="border-0">Name</th>
          <th scope="col" class="border-0">Added</th>
          <th scope="col" class="border-0">Last used</th>
          <th scope="col" class="border-0">Actions</th>
        </tr>
      </thead>
      <tbody>

        @foreach (Session session in ExpiredSessionListReply.Session)
        {
          <tr>
            <td>@session.Name</td>
            <td>@session.SignedIn</td>
            <td>TODO</td>
            <td><a href="#" class="btn btn-secondary-dark">Remove</a></td>
          </tr>
        }
      </tbody>
    </table>
  </div>
}

@code {
  #nullable enable

  private SessionListReply? SessionListReply;
  private SessionListReply? ExpiredSessionListReply;

  protected override async Task OnInitializedAsync()
  {
    await FetchSessionList();
  }

  private async Task InvalidateSession(Session session)
  {
    InvalidateSessionRequest request = new InvalidateSessionRequest { Id = session.Id };
    await SessionsClient.InvalidateSessionAsync(request);
    await FetchSessionList();
  }

  private async Task FetchSessionList()
  {
    SessionListReply = await SessionsClient.ListActiveSessionsAsync(new Google.Protobuf.WellKnownTypes.Empty());
    ExpiredSessionListReply = await SessionsClient.ListInactiveSessionsAsync(new Google.Protobuf.WellKnownTypes.Empty());
  }
}
