@page "/admin/groups"
@attribute [Authorize(Policy = "SuperAdministrator")]

@layout AdminShell

@using AuthServer.Shared.Admin

@inject AuthServer.Shared.Admin.Groups.GroupsClient GroupsClient

<div class="d-flex flex-column flex-md-row justify-content-between">
    <h2>Groups</h2>
    <a class="btn btn-secondary-dark mb-3 mb-md-0" href="/admin/groups/create">Add a new group</a>
</div>

@if (groupsListReply != null)
{
    <div class="table-responsive mb-2">
        <table class="table table-hover table-bordered mb-4 table-secondary table-striped">
            <thead class="bg-secondary-dark">
                <tr>
                    <th scope="col" class="border-0">Name</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>

                @foreach (Group group in groupsListReply.Groups)
                {
                    <tr>
                        <td>@group.Name</td>
                        <td>
                            <a href="/admin/groups/details/@group.Id" class="btn btn-secondary-dark btn-add">Edit</a> 
                            <button class="btn btn-secondary-dark btn-delete" @onclick="@(() => Delete(group))">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private GroupsListReply? groupsListReply;

    protected override async Task OnInitializedAsync()
    {
        groupsListReply = await GroupsClient.ListGroupsAsync(new Google.Protobuf.WellKnownTypes.Empty());
    }

    private async Task Delete(Group group) 
    {
        var request = new DeleteGroupRequest {
            Id = group.Id
        };
        await GroupsClient.DeleteGroupAsync(request);

        if(groupsListReply != null) {
            groupsListReply.Groups.Remove(group);
        }
    }
}
