@page "/admin/apps/setup/"
@attribute [Authorize]

@layout AdminShell

@inject AuthServer.Shared.Admin.AdminApps.AdminAppsClient AdminAppsClient

@using AuthServer.Shared.Admin

@RenderCurrentStep()

<button type="submit" class="col-sm-5 btn btn-secondary-dark mb-3 mb-lg-0" @onclick="RevertToPreviousStep" disabled="@(!(SetupAppStateMachine.HasPreviousStep()))">Previous step</button>
@if(CurrentStep != null && CurrentStep.GetType() == typeof(Steps.FinalizeStep)) {
    <button type="submit" class="col-sm-5 offset-sm-1 btn btn-secondary-dark" @onclick="SetupApp" disabled="@(!(SetupAppStateMachine.HasNextStep()))">Finish setup</button>
} else {
    <button type="submit" class="col-sm-5 offset-sm-1 btn btn-secondary-dark" @onclick="ProceedToNextStep" disabled="@(!(SetupAppStateMachine.HasNextStep()))">Next step</button>
}

@code {
    private SetupAppStateMachine SetupAppStateMachine = null!;
    private IStep? CurrentStep;

    protected override void OnInitialized() 
    {
        SetupAppStateMachine = new SetupAppStateMachine();
        SetupAppStateMachine.Initialize();
        SetupAppStateMachine.OnChange += StateHasChanged;
        SetCurrentStep();
    }

    private async Task SetupApp() 
    {
        AddNewAppRequest request = SetupAppStateMachine.GetAddNewAppRequest();
        AddNewAppReply reply = await AdminAppsClient.AddNewAppAsync(request);
    }

    private void SetCurrentStep() 
    {
        CurrentStep = SetupAppStateMachine.GetCurrentStep();
    }

    private void RevertToPreviousStep() 
    {
        SetupAppStateMachine.GoBack(CurrentStep);
        SetCurrentStep();
    }

    private void ProceedToNextStep() 
    {
        SetupAppStateMachine.FinishStep(CurrentStep);
        SetCurrentStep();
    }

    private RenderFragment RenderCurrentStep() => builder =>
    {
        if(CurrentStep != null) 
        {
            builder.OpenComponent(0, CurrentStep.GetType());
            builder.AddAttribute(1, "StateMachine", SetupAppStateMachine);
            builder.AddComponentReferenceCapture(2, capturedRef => { CurrentStep = (IStep)capturedRef; });
            builder.CloseComponent();
        }
    };
}
