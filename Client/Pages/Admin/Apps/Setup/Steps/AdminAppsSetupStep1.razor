<h4 class="text-lg">Choose Authentication Method</h4>

<p>To integrate Gatekeeper with another application, you need to configure how the authentication process will work.</p>

<form @onsubmit="@SubmitForm">

    <div class="form-check">
        @foreach(AuthenticationMethodsProvider.IAuthMethod method in _authMethods)
        {
            <input class="form-check-input" @onclick="(() => SetActiveMethod(method))" type="radio" id="@method.Name" name="certificateSelectionStep" value="@method.Name">
            <label class="form-check-label" for="@method.Name">
                @method.Name
                @if (_selectedMethod == method) {
                    <br />
                    @method.Description
                    <br />

                    @foreach(string advantage in method.Advantages) 
                    {
                        <div class="pt-1">
                            <span class="material-icons text-green align-middle">add_circle</span> @advantage<br/>
                        </div>
                    }

                    @foreach(string disadvantage in method.Disadvantages) 
                    {
                        <div class="pt-1">
                            <span class="material-icons text-red align-middle">remove_circle</span> @disadvantage<br/>
                        </div>
                    }
                }
            </label>

            <br/>
        }
    </div>

    <button type="submit" class="btn btn-secondary-dark mt-4 @((_selectedMethod == null) ? "disabled" : "")">Next</button>
</form>

@code {
    [Parameter]
    public EventCallback<AuthIdentityChoiceStep> OnNextStepCallback { get; set; }

    private AuthenticationMethodsProvider.IAuthMethod? _selectedMethod;

    private bool IAP_Auth;
    private bool OIDC_Auth;
    private bool LDAP_Auth;
    private bool SCIM_Directory;
    private bool LDAP_Directory;

    private IEnumerable<AuthenticationMethodsProvider.IAuthMethod> _authMethods = new List<AuthenticationMethodsProvider.IAuthMethod>();

    protected override void OnInitialized() 
    {
        _authMethods = (new AuthenticationMethodsProvider()).GetAuthMethods();
    }

    private void SetActiveMethod(AuthenticationMethodsProvider.IAuthMethod method) 
    {
        _selectedMethod = method;
    }

    public async Task SubmitForm()
    {
        List<AuthIdentityChoiceStep.AuthServiceEnum> authServices = new List<AuthIdentityChoiceStep.AuthServiceEnum>();
        if (IAP_Auth)
        {
            authServices.Add(AuthIdentityChoiceStep.AuthServiceEnum.IdentityAwareProxy);
        }
        if (OIDC_Auth)
        {
            authServices.Add(AuthIdentityChoiceStep.AuthServiceEnum.OIDC);
        }
        if (LDAP_Auth)
        {
            authServices.Add(AuthIdentityChoiceStep.AuthServiceEnum.LDAP);
        }

        List<AuthIdentityChoiceStep.IdentityServiceEnum> identityServices = new
            List<AuthIdentityChoiceStep.IdentityServiceEnum>();
        if (SCIM_Directory)
        {
            identityServices.Add(AuthIdentityChoiceStep.IdentityServiceEnum.SCIM);
        }
        if (LDAP_Directory)
        {
            identityServices.Add(AuthIdentityChoiceStep.IdentityServiceEnum.LDAP);
        }

        AuthIdentityChoiceStep step = new AuthIdentityChoiceStep
        {
            AuthServices = authServices,
            IdentityServices = identityServices,
        };

        await OnNextStepCallback.InvokeAsync(step);
    }
}
