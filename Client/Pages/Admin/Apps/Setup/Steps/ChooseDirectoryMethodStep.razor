@implements IStep

<h4 class="text-lg">Choose Directory Method</h4>

<p>For better integration with applications, Gatekeeper offers optional directory services. Those services allow your application to query a list of all users.</p>

<div class="form-check">
    @foreach(DirectoryMethodsProvider.IDirectoryMethod method in _authMethods)
    {
        <input class="form-check-input" @onclick="(() => SetActiveMethod(method))" type="radio" id="@method.Name" name="certificateSelectionStep" value="@method.Name">
        <label class="form-check-label" for="@method.Name">
            @method.Name
            @if (_selectedMethod == method) {
                <br />
                @method.Description
                <br />

                @foreach(string advantage in method.Advantages) 
                {
                    <div class="pt-1">
                        <span class="material-icons text-green align-middle">add_circle</span> @advantage<br/>
                    </div>
                }

                @foreach(string disadvantage in method.Disadvantages) 
                {
                    <div class="pt-1">
                        <span class="material-icons text-red align-middle">remove_circle</span> @disadvantage<br/>
                    </div>
                }
            }
        </label>

        <br/>
    }
</div>

@code {
    [Parameter]
    public SetupAppStateMachine StateMachine { get; set; } = null!;
    public AuthServer.Shared.Admin.AddNewAppRequest.Types.DirectoryChoice DirectoryChoice;

    private DirectoryMethodsProvider.IDirectoryMethod? _selectedMethod;
    private IEnumerable<DirectoryMethodsProvider.IDirectoryMethod> _authMethods = new List<DirectoryMethodsProvider.IDirectoryMethod>();

    protected override void OnInitialized() 
    {
        _authMethods = (new DirectoryMethodsProvider()).GetDirectoryMethods();
    }

    private void SetActiveMethod(DirectoryMethodsProvider.IDirectoryMethod method) 
    {
        _selectedMethod = method;

        switch(method) {
            case DirectoryMethodsProvider.NoDirectoryServiceMethod:
                DirectoryChoice = AuthServer.Shared.Admin.AddNewAppRequest.Types.DirectoryChoice.NoneDirectory;
                StateMachine.SetNextStep(new ConfigureAccessGroupsStep());
                break;
            
            case DirectoryMethodsProvider.LDAPDirectoryServiceMethod:
                DirectoryChoice = AuthServer.Shared.Admin.AddNewAppRequest.Types.DirectoryChoice.LdapDirectory;
                StateMachine.SetNextStep(new ConfigureAccessGroupsStep());
                break;
            
            case DirectoryMethodsProvider.SCIMDirectoryServiceMethod:
                DirectoryChoice = AuthServer.Shared.Admin.AddNewAppRequest.Types.DirectoryChoice.ScimDirectory;
                StateMachine.SetNextStep(new ConfigureScimStep());
                break;
        }
    }
}
