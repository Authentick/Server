@page "/admin/apps/details/{Id:guid}"
@attribute [Authorize]

@layout AdminShell

@using AuthServer.Shared.Admin

@inject AuthServer.Shared.Admin.Apps.AppsClient AppsClient

@if (appDetailReply != null)
{
    <div>
        <h1>Configure @appDetailReply.Name</h1>

        <p>Your LDAP bind credentials:</p>
        <p>@appDetailReply.LdapBindCredentials</p>
        <p>@appDetailReply.LdapBindCredentialsPassword</p>

        <p>Your LDAP Base DN:</p>
        <p>@appDetailReply.LdapDn</p>

        <p>Groups:</p>

        @foreach (GrantedAppGroup group in appDetailReply.Groups)
        {
            <li>@group.Name (@group.Id) <button @onclick="@(async () => await RemoveGroupFromApp(group))">Remove access</button></li>
        }

        <form @onsubmit="@AddGroupToApp">
            <input type="text" @bind="@GroupId" />
            <button type="submit">Add group</button>
        </form>

    </div>
}

@code {
    [Parameter]
    public Guid Id { get; set; }

    private AppDetailReply? appDetailReply;
    private string GroupId = "";

    protected override async Task OnInitializedAsync()
    {
        AppDetailRequest request = new AppDetailRequest
        {
            Id = Id.ToString(),
        };

        appDetailReply = await AppsClient.GetAppDetailsAsync(request);
    }

    private async Task AddGroupToApp()
    {
        AddGroupToAppRequest request = new AddGroupToAppRequest
        {
            AppId = Id.ToString(),
            GroupId = GroupId,
        };
        await AppsClient.AddGroupToAppAsync(request);
    }

    private async Task RemoveGroupFromApp(GrantedAppGroup group)
    {
        RemoveGroupFromAppRequest request = new RemoveGroupFromAppRequest
        {
            AppId = Id.ToString(),
            GroupId = group.Id,
        };

        await AppsClient.RemoveGroupFromAppAsync(request);
    }
}
