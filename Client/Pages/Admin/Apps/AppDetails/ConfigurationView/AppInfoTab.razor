@using AuthServer.Shared.Admin
@using AuthServer.Client.Shared.Components.Form
@inject AuthServer.Shared.Admin.AdminApps.AdminAppsClient AppsClient

@if (TabData != null) {
    <br />
    <div class="col-12 col-md-6 p-0">
        <ValidatingInput 
            Name="Name"
            Placeholder="Name"
            InitialValue="@TabData.Name"
            ValidationState="NameValidationState"
            ValueChangedCallback="NameChanged"
        />
    </div>

    <div class="col-12 col-md-6 p-0">
        <ValidatingTextarea 
            Name="Description"
            Placeholder="Description shown to users"
            InitialValue="@TabData.Description"
            ValidationState="DescriptionValidationState"
            ValueChangedCallback="DescriptionChanged"
        />
    </div>

    @if (@TabData.Url != null) {
        <div class="form-group col-12 col-md-6 p-0">
            <input type="text" @bind="@TabData.Url" class="form-control bg-secondary" placeholder="URL shown to users" />
        </div>
    }

    <AuthServer.Client.Shared.Components.Button.SavingButton
        ButtonClickedCallback="@SaveButtonClicked"
        Configuration="_saveButtonConfiguration" />
}

@code {
    [Parameter]
    public AppInfoTabData? TabData { get; set;}

    [Parameter]
    public EventCallback<AppInfoTabData?> TabDataChangedCallBack { get; set; }

    private AuthServer.Client.Shared.Components.Button.SavingButton.ButtonConfiguration _saveButtonConfiguration = new Shared.Components.Button.SavingButton.ButtonConfiguration();
    private ValidatingInput.ValidationStateEnum NameValidationState;
    private ValidatingTextarea.ValidationStateEnum DescriptionValidationState;

    public class AppInfoTabData
    {
        public string AppId { get; set; }
        public string? Name { get; set;}
        public string? Description { get; set; }
        public string? Url { get; set; }
    }

    private void NameChanged(string name)
    {
        if (TabData != null)
        {
            TabData.Name = name;
        }

        if(name.Length > 0)
        {
            NameValidationState = ValidatingInput.ValidationStateEnum.Success;
        } 
        else
        {
            NameValidationState = ValidatingInput.ValidationStateEnum.Failed;
        } 
    }

    private void DescriptionChanged(string description)
    {
        if (TabData != null)
        {
            TabData.Description = description;
        }

        if(description.Length > 0)
        {
            DescriptionValidationState = ValidatingTextarea.ValidationStateEnum.Success;
        } 
        else
        {
            DescriptionValidationState = ValidatingTextarea.ValidationStateEnum.Failed;
        }    
    }

    private async Task SaveButtonClicked() 
    {
        _saveButtonConfiguration.State = Shared.Components.Button.SavingButton.ButtonStateEnum.Processing;
        SaveAppInformationRequest request = new SaveAppInformationRequest {
            AppId = TabData.AppId,
            Description = TabData.Description,
            Name = TabData.Name,
            Url = TabData.Url,
        };
        
        await AppsClient.SaveAppInformationAsync(request);
        _saveButtonConfiguration.State = Shared.Components.Button.SavingButton.ButtonStateEnum.Finished;
        await TabDataChangedCallBack.InvokeAsync(TabData);
        await Task.Delay(1000);
        _saveButtonConfiguration.State = Shared.Components.Button.SavingButton.ButtonStateEnum.Default;
    }
}
