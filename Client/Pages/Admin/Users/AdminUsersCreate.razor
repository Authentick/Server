@page "/admin/users/create"
@attribute [Authorize(Policy = "SuperAdministrator")]

@layout AdminShell

@using AuthServer.Shared.Admin
@using AuthServer.Client.Shared.Components.Form
@using AuthServer.Client.Shared.Components.Form.FormValidator

@inject NavigationManager NavigationManager
@inject AuthServer.Shared.Admin.Users.UsersClient UsersClient

<h2 class="text-lg">Add a new user</h2>

<ValidatingFormWrapper FormValidityChangedCallback="FormValidityChangedCallback">
    <ValidatingInput 
        Name="Username"
        Placeholder="Username"
        @bind-Value="@Username"
        Required="true"
        FormValidators="new List<IFormValidator>(){new NotEmptyStringValidator()}"
    />
    <ValidatingInput 
        Name="Email"
        InputType="email"
        Placeholder="Email"
        @bind-Value="@Email"
        Required="true"
        FormValidators="new List<IFormValidator>(){new NotEmptyStringValidator(), new EmailValidator()}"
    />
    <ValidatingInput 
        Name="Password"
        InputType="password"
        Placeholder="Password"
        @bind-Value="@Password"
        Required="true"
        FormValidators="new List<IFormValidator>(){new NotEmptyStringValidator(), new PasswordPolicyValidator()}"
    />
</ValidatingFormWrapper>

<button type="submit" class="btn btn-secondary-dark btn-add" disabled="@Disabled">Add</button>

@code {
    private string Username = "";
    private string Email = "";
    private string Password = "";
    private bool Disabled = true;

    private async Task FormValidityChangedCallback(bool valid)
    {
        Disabled = !valid;
    }
    
    private async Task SubmitForm() 
    {
        CreateUserRequest createUserRequest = new CreateUserRequest 
        {
            Username = Username,
            Email = Email,
            Password = Password,
        };
        
        CreateUserResponse response = await UsersClient.CreateUserAsync(createUserRequest);
        NavigationManager.NavigateTo("/admin/users/");
    }
}
