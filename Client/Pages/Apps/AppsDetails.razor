@page "/apps/details/{Id:guid}"
@attribute [Authorize]

@layout AppShell

@using AuthServer.Shared.Apps

@inject AuthServer.Shared.Apps.Apps.AppsClient AppsClient

@if(appReply != null) {
    <h2>@appReply.Name</h2>

    <h2>Access</h2>
    <div class="alert alert-danger" role="alert">
        <h4 class="alert-heading">Keep your Gatekeeper password safe</h4>
        <p>Do not provide your Gatekeeper credentials to any other application. @appReply.Name does not need it to identify you.</p>
    </div>

    @switch(appReply.AuthSettingCase) {
        case GetAppDetailsReply.AuthSettingOneofCase.LdapAuth:
            <p>@appReply.Name requires you to provide a username and application-specific password to authenticate.</p>
            <button @onclick="@CreateLdapPassword">Generate application specific password</button>
            @if(newLdapPassword != null) {
                <p>@newLdapPassword</p>
            }
            break;
        case GetAppDetailsReply.AuthSettingOneofCase.UrlAuth:
            <p>@appReply.Name will be able to automatically log you in.</p>
            <a href="@appReply.UrlAuth.Url" class="btn btn-primary">Proceed to @appReply.Name</a>
            break;
    }
}

@code {
    [Parameter]
    public Guid Id { get; set; }

    private GetAppDetailsReply? appReply;
    private string? newLdapPassword;

    protected override async Task OnInitializedAsync()
    {
        GetAppDetailsRequest request = new GetAppDetailsRequest {
            Id = Id.ToString(),
        };

        appReply = await AppsClient.GetAppDetailsAsync(request);
    }

    private async Task CreateLdapPassword() 
    {
        CreateLdapCredentialRequest request = new CreateLdapCredentialRequest {
            Id = Id.ToString(),
        };

        newLdapPassword = (await AppsClient.CreateLdapCredentialAsync(request)).Password;
    }
}
