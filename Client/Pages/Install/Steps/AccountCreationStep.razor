@implements IStep
@implements IDisposable

<h1>Create your first account</h1>

<EditForm EditContext="@editContext">
    <DataAnnotationsValidator />

    <InputText @bind-Value="userAccount.Username" class="form-control bg-secondary" placeholder="Username" />
    <br/>

    <InputText @bind-Value="userAccount.Password" type="password" class="form-control bg-secondary" placeholder="Password" />
    @if(!_passesPasswordPolicy) 
    {
        <p>Your password fails the password policy.</p>
    }
    <br/>

    <InputText @bind-Value="userAccount.Email" class="form-control bg-secondary" placeholder="Email" />
</EditForm>

@code {
    [Parameter]
    public InstallStateMachine StateMachine { get; set; }
    internal UserAccount userAccount = new UserAccount();
    private EditContext? editContext;
    private bool _passesPasswordPolicy = false;

    protected override void OnInitialized()
    {
        editContext = new EditContext(userAccount);
        editContext.OnFieldChanged += HandleFieldChanged;

        StateMachine.SetNextStep(null);
        StateMachine.SetPreviousStep(new EmailCustomSettingsStep());
    }
    private void CheckPasswordPolicy() {
        string password = userAccount.Password ?? "";
        
        // Default params from https://github.com/dotnet/aspnetcore/blob/b795ac3546eb3e2f47a01a64feb3020794ca33bb/src/Identity/Extensions.Core/src/PasswordOptions.cs
        if (
            password.Length < 6 ||
            !password.Any(char.IsUpper) || 
            !password.Any(char.IsLower) ||
            !password.Any(char.IsDigit) ||
            password.All(char.IsLetterOrDigit)
        )
        {
            _passesPasswordPolicy = false;
        }
        else
        {
            _passesPasswordPolicy = true;
        }        
    }

    private void HandleFieldChanged(object sender, FieldChangedEventArgs e)
    {
        if(editContext != null) 
        {
            bool formValid = editContext.Validate();
            CheckPasswordPolicy();

            if (formValid && _passesPasswordPolicy)
            {
                // Note: This is a hack around the fact that the next button will only available
                // if a next step is set. See InstallIndex.razor for reference.
                StateMachine.SetNextStep(new InitialSetupStep());
            }
            else
            {
                StateMachine.SetNextStep(null);
            } 
        }
    }

    public void Dispose()
    {
        editContext.OnFieldChanged -= HandleFieldChanged;
    }

    internal class UserAccount {
        [Required]
        public string? Username { get; set; }

        [Required]
        public string? Password { get; set; }

        [Required]
        public string? Email { get; set; }
    }
}
