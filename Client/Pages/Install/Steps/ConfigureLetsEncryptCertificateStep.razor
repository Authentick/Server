@implements IStep

@using AuthServer.Client.Shared.Components.Form
@using AuthServer.Client.Shared.Components.Form.FormValidator

@inject AuthServer.Shared.ConnectivityCheckService.ConnectivityCheckServiceClient ConnectivityCheckServiceClient

<h1>Configure LetsEncrypt certificates</h1>

<p>By proceeding you agree to the currently-in-effect <a href="https://letsencrypt.org/repository/">Subscriber Agreement.</a>.</p>

<ValidatingFormWrapper FormValidityChangedCallback="FormValidityChangedCallback">
    <ValidatingInput 
        Name="Hostname"
        Placeholder="example.com"
        @bind-Value="letsEncryptCertificateSettings.DomainName"
        Required="true"
        FormValidators="new List<IFormValidator>(){new NotEmptyStringValidator(), new DomainPublicAccessibleValidator(ConnectivityCheckServiceClient)}"
    />
    <ValidatingInput 
        Name="Contact Email address"
        InputType="email"
        Placeholder="Email"
        @bind-Value="letsEncryptCertificateSettings.Email"
        Required="true"
        FormValidators="new List<IFormValidator>(){new NotEmptyStringValidator(), new EmailValidator()}"
    />
</ValidatingFormWrapper>

@code {
    #nullable enable

    [Parameter]
    public InstallStateMachine StateMachine { get; set; }

    internal LetsEncryptCertificateSettings letsEncryptCertificateSettings = new LetsEncryptCertificateSettings();

    protected override void OnInitialized()
    {
        StateMachine.SetNextStep(null);
        StateMachine.SetPreviousStep(new CertificateSelectionStep());
    }

    private async Task FormValidityChangedCallback(bool valid)
    {
        if (valid)
        {
            StateMachine.SetNextStep(new EmailSelectionStep());
        }
        else 
        {
            StateMachine.SetNextStep(null);    
        }
    }

    internal class LetsEncryptCertificateSettings 
    {
        [Required]
        public string? DomainName { get; set; }

        [Required]
        public string? Email { get; set; }

    }
}
