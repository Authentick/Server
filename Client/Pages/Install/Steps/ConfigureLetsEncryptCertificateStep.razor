@implements IStep
@implements IDisposable

@using AuthServer.Shared

@inject AuthServer.Shared.ConnectivityCheckService.ConnectivityCheckServiceClient ConnectivityCheckServiceClient

<h1>Configure LetsEncrypt certificates</h1>

<p>By proceeding you agree to the currently-in-effect <a href="https://letsencrypt.org/repository/">Subscriber Agreement.</a>.</p>

<EditForm EditContext="@editContext">
    <DataAnnotationsValidator />
    
    <InputText @bind-Value="letsEncryptCertificateSettings.DomainName" class="form-control bg-secondary" placeholder="Hostname (e.g. example.com)" />
    @if(!_isValidPublicHostname) {
        <p>Public hostname doesn't resolve to this host.</p>
    }
    <br/>

    <InputText @bind-Value="letsEncryptCertificateSettings.Email" type="email" class="form-control bg-secondary" placeholder="Contact email address" />
</EditForm>

@code {
    #nullable enable

    [Parameter]
    public InstallStateMachine StateMachine { get; set; }

    internal LetsEncryptCertificateSettings letsEncryptCertificateSettings = new LetsEncryptCertificateSettings();
    private EditContext? editContext;
    private bool _isValidPublicHostname;
    private EventHandler<Microsoft.AspNetCore.Components.Forms.FieldChangedEventArgs> HandleFieldChangedAction => async (s, e) => await HandleFieldChanged(s, e);

    protected override void OnInitialized()
    {
        editContext = new EditContext(letsEncryptCertificateSettings);
        editContext.OnFieldChanged += HandleFieldChangedAction;

        StateMachine.SetNextStep(null);
        StateMachine.SetPreviousStep(new CertificateSelectionStep());
    }

    private async Task HandleFieldChanged(object sender, FieldChangedEventArgs e)
    {
        if(editContext != null) 
        {
            bool formValid = editContext.Validate();
            if (formValid)
            {
                 IsPublicAccessibleRequest request = new IsPublicAccessibleRequest{
                    Hostname = letsEncryptCertificateSettings.DomainName,
                };

                IsPublicAccessibleReply reply = await ConnectivityCheckServiceClient.IsPublicAccessibleAsync(request);
                
                if(reply.State != IsPublicAccessibleReply.Types.AccessibleReplyEnum.Success) {
                    _isValidPublicHostname = false;
                    StateMachine.SetNextStep(null);
                } else {
                    _isValidPublicHostname = true;
                    StateMachine.SetNextStep(new EmailSelectionStep());
                }
            }
            else
            {
                StateMachine.SetNextStep(null);
            } 
        }
    }

    public void Dispose()
    {
        editContext.OnFieldChanged -= HandleFieldChangedAction;
    }

    internal class LetsEncryptCertificateSettings 
    {
        [Required]
        public string? DomainName { get; set; }

        [Required]
        public string? Email { get; set; }

    }
}
